#!/bin/bash

# mNAV Update & Summary Script
# Updates Bitcoin prices, generates comprehensive data, and displays formatted summary
# Now using Yahoo Finance for all stock data (no API keys required!)

set -e

echo "üöÄ Updating mNAV Data..."
echo ""

# Step 1: Update Bitcoin prices from CoinGecko (free API)
echo "üìä Fetching latest Bitcoin prices..."
if ! ./bin/bitcoin-historical -start=$(date -v-1y +%Y-%m-%d) > /dev/null 2>&1; then
    echo "   ‚ö†Ô∏è  Using existing Bitcoin historical data"
fi
if ! ./bin/fetch-current-bitcoin > /dev/null 2>&1; then
    echo "   ‚ö†Ô∏è  Using existing current Bitcoin data"
fi

# Step 1.5: Update MSTR stock prices using Yahoo Finance (free!)
echo "üìà Fetching fresh MSTR stock prices from Yahoo Finance..."
if ! ./bin/update-stock-data -symbol=MSTR -verbose > /dev/null 2>&1; then
    echo "   ‚ö†Ô∏è  Using existing MSTR stock data"
fi

# Step 1.6: Fetch FBTC price for ratio calculation
echo "üìä Fetching FBTC price for ratio analysis..."
FBTC_PRICE=$(./bin/fetch-fbtc-price -format=simple 2>/dev/null || echo "0")
if [ "$FBTC_PRICE" = "0" ]; then
    echo "   ‚ö†Ô∏è  Could not fetch FBTC price, ratio unavailable"
fi

# Step 1.7: Update MSTR Bitcoin holdings with latest data
echo "ü™ô Fetching latest MSTR Bitcoin holdings..."
if ! ./bin/fetch-mstr-holdings > /dev/null 2>&1; then
    echo "   ‚ö†Ô∏è  Could not fetch latest MSTR holdings, using existing data"
else
    echo "   ‚úÖ Updated MSTR Bitcoin holdings from latest sources"
fi

# Step 2: Generate comprehensive CSV with all data
echo "üîÑ Processing comprehensive financial data..."
./bin/csv-exporter -symbol=MSTR > /dev/null 2>&1

# Step 3: Extract latest data from CSV
CSV_FILE="MSTR_financial_data_$(date +%Y-%m-%d).csv"
if [ ! -f "$CSV_FILE" ]; then
    CSV_FILE=$(ls -t MSTR_financial_data_*.csv | head -1)
fi

# Parse the latest data point
LATEST_DATA=$(tail -1 "$CSV_FILE")
HEADER=$(head -1 "$CSV_FILE")

# Extract values using awk with error handling
STOCK_PRICE=$(echo "$LATEST_DATA" | awk -F',' '{print $2}' | sed 's/[^0-9.]//g')
MARKET_CAP=$(echo "$LATEST_DATA" | awk -F',' '{if($4>0) printf "%.1f", $4/1000000000; else print "0"}')
BITCOIN_PRICE=$(echo "$LATEST_DATA" | awk -F',' '{if($5>0) printf "%.0f", $5; else print "0"}')
BITCOIN_HOLDINGS=$(echo "$LATEST_DATA" | awk -F',' '{if($6>0) printf "%.0f", $6; else print "0"}')
BITCOIN_VALUE=$(echo "$LATEST_DATA" | awk -F',' '{if($7>0) printf "%.1f", $7/1000000000; else print "0"}')
MNAV_RATIO=$(echo "$LATEST_DATA" | awk -F',' '{if($9>0) print $9; else print "N/A"}')
PREMIUM=$(echo "$LATEST_DATA" | awk -F',' '{if($10!="") printf "%.1f", $10; else print "0"}')
AVG_COST=$(echo "$LATEST_DATA" | awk -F',' '{if($18>0) printf "%.0f", $18; else print "65638"}') # Use default if not available

# Calculate gains with error handling
if [[ "$BITCOIN_PRICE" != "0" && "$AVG_COST" != "0" && -n "$BITCOIN_PRICE" && -n "$AVG_COST" ]]; then
    GAIN_PCT=$(echo "scale=1; ($BITCOIN_PRICE - $AVG_COST) / $AVG_COST * 100" | bc -l 2>/dev/null || echo "0")
else
    GAIN_PCT="N/A"
fi

# Get previous data for trend analysis with error handling
if [ "$(wc -l < "$CSV_FILE")" -gt 2 ]; then
    PREV_DATA=$(tail -2 "$CSV_FILE" | head -1)
    PREV_MNAV=$(echo "$PREV_DATA" | awk -F',' '{if($9>0) print $9; else print "N/A"}')
    PREV_PREMIUM=$(echo "$PREV_DATA" | awk -F',' '{if($10!="") printf "%.1f", $10; else print "0"}')
else
    PREV_MNAV="N/A"
    PREV_PREMIUM="0"
fi

# Determine trend
if [[ "$PREMIUM" != "N/A" && "$PREV_PREMIUM" != "N/A" && "$PREV_PREMIUM" != "0" ]]; then
    if (( $(echo "$PREMIUM < $PREV_PREMIUM" | bc -l 2>/dev/null || echo 0) )); then
        TREND="Premium decreasing = better value ‚úÖ"
        TREND_STATUS="üìà Positive Trend:"
    else
        TREND="Premium increasing = higher valuation ‚ö†Ô∏è"
        TREND_STATUS="üìä Market Trend:"
    fi
else
    TREND="Trend analysis unavailable"
    TREND_STATUS="üìä Market Status:"
fi

# Count total records and transactions
TOTAL_RECORDS=$(wc -l < "$CSV_FILE")
TOTAL_RECORDS=$((TOTAL_RECORDS - 1))  # Subtract header

# Calculate FBTC:MSTR ratio if FBTC price is available
if [ "$FBTC_PRICE" != "0" ] && [ -n "$FBTC_PRICE" ] && [ "$STOCK_PRICE" != "0" ] && [ -n "$STOCK_PRICE" ]; then
    FBTC_MSTR_RATIO=$(echo "scale=2; $FBTC_PRICE / $STOCK_PRICE" | bc -l 2>/dev/null || echo "N/A")
else
    FBTC_MSTR_RATIO="N/A"
fi

# Calculate current portfolio values with updated prices
FBTC_SHARES="833.65"  # From latest portfolio data
MSTR_SHARES="50.84"   # From latest portfolio data

if [ "$FBTC_PRICE" != "0" ] && [ "$STOCK_PRICE" != "0" ]; then
    CURRENT_FBTC_VALUE=$(echo "scale=2; $FBTC_SHARES * $FBTC_PRICE" | bc -l 2>/dev/null || echo "0")
    CURRENT_MSTR_VALUE=$(echo "scale=2; $MSTR_SHARES * $STOCK_PRICE" | bc -l 2>/dev/null || echo "0")
    
    # 1. Net Value: Total market value (used for rebalancing)
    NET_VALUE=$(echo "scale=2; $CURRENT_FBTC_VALUE + $CURRENT_MSTR_VALUE" | bc -l 2>/dev/null || echo "0")
    
    # 2. Net Bitcoin Value: Net Value divided by current Bitcoin price
    if [ "$BITCOIN_PRICE" != "0" ] && [ "$BITCOIN_PRICE" != "N/A" ]; then
        NET_BITCOIN_VALUE=$(echo "scale=4; $NET_VALUE / $BITCOIN_PRICE" | bc -l 2>/dev/null || echo "0")
    else
        NET_BITCOIN_VALUE="N/A"
    fi
    
    # 3. Bitcoin Exposure: Actual Bitcoin exposure accounting for MSTR premium (in BTC)
    if [ "$MNAV_RATIO" != "N/A" ] && [ "$MNAV_RATIO" != "0" ]; then
        MSTR_BITCOIN_EXPOSURE_USD=$(echo "scale=2; $CURRENT_MSTR_VALUE / $MNAV_RATIO" | bc -l 2>/dev/null || echo "0")
    else
        MSTR_BITCOIN_EXPOSURE_USD="$CURRENT_MSTR_VALUE"
    fi
    
    # Calculate total Bitcoin exposure in BTC terms
    if [ "$BITCOIN_PRICE" != "0" ] && [ "$BITCOIN_PRICE" != "N/A" ]; then
        BITCOIN_EXPOSURE=$(echo "scale=4; ($CURRENT_FBTC_VALUE + $MSTR_BITCOIN_EXPOSURE_USD) / $BITCOIN_PRICE" | bc -l 2>/dev/null || echo "0")
    else
        BITCOIN_EXPOSURE="N/A"
    fi
    
    PORTFOLIO_FBTC_MSTR_RATIO=$(echo "scale=2; $CURRENT_FBTC_VALUE / $CURRENT_MSTR_VALUE" | bc -l 2>/dev/null || echo "N/A")
else
    CURRENT_FBTC_VALUE="N/A"
    CURRENT_MSTR_VALUE="N/A"
    NET_VALUE="N/A"
    NET_BITCOIN_VALUE="N/A"
    MSTR_BITCOIN_EXPOSURE_USD="N/A"
    BITCOIN_EXPOSURE="N/A"
    PORTFOLIO_FBTC_MSTR_RATIO="N/A"
fi

# Display formatted summary
echo ""
echo "üéâ mNAV Successfully Updated!"
echo ""
echo "üìä Current mNAV ($(date '+%B %d, %Y')): $MNAV_RATIO"
echo ""
echo "üéØ Latest MSTR Analysis:"
echo "   Stock Price: \$$STOCK_PRICE"
echo "   Market Cap: \$${MARKET_CAP} billion"
echo "   Bitcoin Price: \$$BITCOIN_PRICE (fresh from CoinGecko)"
echo "   Bitcoin Holdings: $(printf "%'.0f" "$BITCOIN_HOLDINGS" 2>/dev/null || echo "$BITCOIN_HOLDINGS") BTC"
echo "   Bitcoin Value: \$${BITCOIN_VALUE} billion"
echo "   mNAV Ratio: $MNAV_RATIO"
echo "   Premium: ${PREMIUM}%"
echo ""
echo "$TREND_STATUS"
echo "   Previous mNAV: $PREV_MNAV (${PREV_PREMIUM}% premium)"
echo "   Current mNAV: $MNAV_RATIO (${PREMIUM}% premium)"
echo "   Trend: $TREND"
echo ""

echo "üìä Portfolio Rebalancing Analysis:"
if [ "$NET_VALUE" != "N/A" ] && [ "$MNAV_RATIO" != "N/A" ]; then
    echo "   üíº Current Holdings (Updated Prices):"
    echo "      FBTC: $FBTC_SHARES shares @ \$$FBTC_PRICE = \$$CURRENT_FBTC_VALUE"
    echo "      MSTR: $MSTR_SHARES shares @ \$$STOCK_PRICE = \$$CURRENT_MSTR_VALUE"
    echo ""
    echo "   üìä Portfolio Metrics:"
    echo "      1Ô∏è‚É£  Net Value: \$$NET_VALUE (FBTC + MSTR market values)"
    echo "      2Ô∏è‚É£  Net Bitcoin Value: $NET_BITCOIN_VALUE BTC (√∑ Bitcoin price)"
    echo "      3Ô∏è‚É£  Bitcoin Exposure: $BITCOIN_EXPOSURE BTC (accounting for MSTR premium)"
    echo "      Current Portfolio FBTC:MSTR Ratio: $PORTFOLIO_FBTC_MSTR_RATIO:1"
    echo ""
    
    # Determine target ratio based on current mNAV
    if (( $(echo "$MNAV_RATIO >= 2.5" | bc -l 2>/dev/null || echo 0) )); then
        TARGET_RATIO="20"
        TARGET_RANGE="2.50-2.75"
    elif (( $(echo "$MNAV_RATIO >= 2.0" | bc -l 2>/dev/null || echo 0) )); then
        TARGET_RATIO="12"
        TARGET_RANGE="2.00-2.25"
    elif (( $(echo "$MNAV_RATIO >= 1.875" | bc -l 2>/dev/null || echo 0) )); then
        TARGET_RATIO="10"
        TARGET_RANGE="1.875-2.125"
    elif (( $(echo "$MNAV_RATIO >= 1.75" | bc -l 2>/dev/null || echo 0) )); then
        TARGET_RATIO="8"
        TARGET_RANGE="1.75-2.00"
    elif (( $(echo "$MNAV_RATIO >= 1.625" | bc -l 2>/dev/null || echo 0) )); then
        TARGET_RATIO="6"
        TARGET_RANGE="1.625-1.875"
    elif (( $(echo "$MNAV_RATIO >= 1.5" | bc -l 2>/dev/null || echo 0) )); then
        TARGET_RATIO="4"
        TARGET_RANGE="1.50-1.75"
    elif (( $(echo "$MNAV_RATIO >= 1.375" | bc -l 2>/dev/null || echo 0) )); then
        TARGET_RATIO="3"
        TARGET_RANGE="1.375-1.6875"
    else
        TARGET_RATIO="2"
        TARGET_RANGE="1.25-1.50"
    fi
    
    echo "   üéØ mNAV-Based Strategy:"
    echo "      Current mNAV: $MNAV_RATIO (Range: $TARGET_RANGE)"
    echo "      Target FBTC:MSTR Ratio: ${TARGET_RATIO}:1"
    
    # Calculate if rebalancing is needed
    RATIO_DIFF=$(echo "scale=2; $PORTFOLIO_FBTC_MSTR_RATIO - $TARGET_RATIO" | bc -l 2>/dev/null || echo "0")
    RATIO_DIFF_ABS=$(echo "$RATIO_DIFF" | sed 's/-//')
    
    # Check if within 5% tolerance
    TOLERANCE=$(echo "scale=2; $TARGET_RATIO * 0.05" | bc -l 2>/dev/null || echo "0")
    
    if (( $(echo "$RATIO_DIFF_ABS <= $TOLERANCE" | bc -l 2>/dev/null || echo 0) )); then
        echo "      ‚úÖ Portfolio is well balanced (within 5% tolerance)"
        echo "      üí° No rebalancing needed - continue monitoring"
    else
        echo "      ‚öñÔ∏è  Rebalancing recommended:"
        
        # Calculate target values based on Net Value (market values for rebalancing)
        TARGET_FBTC_VALUE=$(echo "scale=2; $NET_VALUE * $TARGET_RATIO / ($TARGET_RATIO + 1)" | bc -l 2>/dev/null || echo "0")
        TARGET_MSTR_VALUE=$(echo "scale=2; $NET_VALUE / ($TARGET_RATIO + 1)" | bc -l 2>/dev/null || echo "0")
        
        FBTC_DIFF=$(echo "scale=2; $TARGET_FBTC_VALUE - $CURRENT_FBTC_VALUE" | bc -l 2>/dev/null || echo "0")
        MSTR_DIFF=$(echo "scale=2; $TARGET_MSTR_VALUE - $CURRENT_MSTR_VALUE" | bc -l 2>/dev/null || echo "0")
        
        if (( $(echo "$FBTC_DIFF > 0" | bc -l 2>/dev/null || echo 0) )); then
            # Need more FBTC, less MSTR
            FBTC_SHARES_TO_BUY=$(echo "scale=2; $FBTC_DIFF / $FBTC_PRICE" | bc -l 2>/dev/null || echo "0")
            if (( $(echo "$MSTR_DIFF < 0" | bc -l 2>/dev/null || echo 0) )); then
                MSTR_SHARES_TO_SELL=$(echo "scale=2; -$MSTR_DIFF / $STOCK_PRICE" | bc -l 2>/dev/null || echo "0")
                MSTR_VALUE_TO_SELL=$(echo "scale=2; -$MSTR_DIFF" | bc -l 2>/dev/null || echo "0")
                echo "         üìà BUY $FBTC_SHARES_TO_BUY shares of FBTC (~\$$FBTC_DIFF)"
                echo "         üìâ SELL $MSTR_SHARES_TO_SELL shares of MSTR (~\$$MSTR_VALUE_TO_SELL)"
            else
                echo "         üìà BUY $FBTC_SHARES_TO_BUY shares of FBTC (~\$$FBTC_DIFF)"
                echo "         üí° Hold current MSTR position"
            fi
        else
            # Need more MSTR, less FBTC
            if (( $(echo "$MSTR_DIFF > 0" | bc -l 2>/dev/null || echo 0) )); then
                MSTR_SHARES_TO_BUY=$(echo "scale=2; $MSTR_DIFF / $STOCK_PRICE" | bc -l 2>/dev/null || echo "0")
                echo "         üìà BUY $MSTR_SHARES_TO_BUY shares of MSTR (~\$$MSTR_DIFF)"
            fi
            if (( $(echo "$FBTC_DIFF < 0" | bc -l 2>/dev/null || echo 0) )); then
                FBTC_VALUE_TO_SELL=$(echo "scale=2; -$FBTC_DIFF" | bc -l 2>/dev/null || echo "0")
                FBTC_SHARES_TO_SELL=$(echo "scale=2; $FBTC_VALUE_TO_SELL / $FBTC_PRICE" | bc -l 2>/dev/null || echo "0")
                echo "         üìâ SELL $FBTC_SHARES_TO_SELL shares of FBTC (~\$$FBTC_VALUE_TO_SELL)"
            fi
        fi
        
        echo "      üéØ After Rebalancing (Market Values):"
        echo "         FBTC: \$$TARGET_FBTC_VALUE"
        echo "         MSTR: \$$TARGET_MSTR_VALUE"
        echo "         New Ratio: ${TARGET_RATIO}:1"
    fi
else
    echo "   ‚ö†Ô∏è  Portfolio analysis unavailable - missing price data"
fi
echo ""
echo "üì° DATA SOURCES & FRESHNESS REPORT"
echo "=================================="

# Get timestamps for data freshness reporting
CURRENT_TIME=$(date '+%Y-%m-%d %H:%M:%S %Z')
echo "   üìÖ Report Generated: $CURRENT_TIME"
echo ""

# Bitcoin Price Data
echo "ü™ô Bitcoin Price Data:"
BITCOIN_DATA_FILE=$(ls -t data/bitcoin-prices/historical/bitcoin_current_*_*days.json 2>/dev/null | head -1)
if [ -n "$BITCOIN_DATA_FILE" ]; then
    BITCOIN_DATA_DATE=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$BITCOIN_DATA_FILE" 2>/dev/null || stat -c "%y" "$BITCOIN_DATA_FILE" 2>/dev/null | cut -d' ' -f1-2)
    echo "   üìä Source: CoinGecko API"
    echo "   üí∞ Current Price: \$$BITCOIN_PRICE"
    echo "   üìÖ Last Updated: $BITCOIN_DATA_DATE"
    echo "   üìÅ Data File: $(basename "$BITCOIN_DATA_FILE")"
else
    echo "   üìä Source: CoinGecko API (fallback data)"
    echo "   üí∞ Current Price: \$$BITCOIN_PRICE"
    echo "   ‚ö†Ô∏è  Timestamp: Unable to determine file date"
fi
echo ""

# MSTR Stock Data
echo "üìà MSTR Stock Data:"
# Check for Yahoo Finance data files (prioritize newer UPDATED files)
MSTR_UPDATED_FILE=$(ls -t data/stock-data/MSTR_stock_data_UPDATED_*.json 2>/dev/null | head -1)
MSTR_STOCK_FILE=$(ls -t data/stock-data/MSTR_stock_data_*.json 2>/dev/null | head -1)

# Use the most recent file (prefer UPDATED files)
if [ -n "$MSTR_UPDATED_FILE" ]; then
    MSTR_DATA_FILE="$MSTR_UPDATED_FILE"
    MSTR_DATA_SOURCE="Yahoo Finance (Auto-Updated)"
elif [ -n "$MSTR_STOCK_FILE" ]; then
    MSTR_DATA_FILE="$MSTR_STOCK_FILE"
    MSTR_DATA_SOURCE="Yahoo Finance"
else
    MSTR_DATA_FILE=""
    MSTR_DATA_SOURCE="Yahoo Finance (No data file found)"
fi

if [ -n "$MSTR_DATA_FILE" ]; then
    MSTR_DATA_DATE=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$MSTR_DATA_FILE" 2>/dev/null || stat -c "%y" "$MSTR_DATA_FILE" 2>/dev/null | cut -d' ' -f1-2)
    echo "   üìä Source: $MSTR_DATA_SOURCE"
    echo "   üí∞ Current Price: \$$STOCK_PRICE"
    echo "   üìÖ Last Updated: $MSTR_DATA_DATE"
    echo "   üìÅ Data File: $(basename "$MSTR_DATA_FILE")"
    echo "   üîÑ Collection Method: Free Yahoo Finance API"
else
    echo "   üìä Source: $MSTR_DATA_SOURCE"
    echo "   üí∞ Current Price: \$$STOCK_PRICE"
    echo "   ‚ö†Ô∏è  Timestamp: Unable to determine file date"
fi
echo ""

# FBTC Price Data
echo "üìä FBTC Price Data:"
if [ "$FBTC_PRICE" != "0" ]; then
    echo "   üìä Source: Yahoo Finance"
    echo "   üí∞ Current Price: \$$FBTC_PRICE"
    echo "   üìÖ Fetched: $CURRENT_TIME"
    echo "   üîÑ Collection Method: Free Yahoo Finance API"
else
    echo "   ‚ùå Source: Yahoo Finance"
    echo "   üí∞ Current Price: Unavailable"
    echo "   üìÖ Last Attempt: $CURRENT_TIME"
    echo "   ‚ö†Ô∏è  Status: Yahoo Finance API call failed"
fi
echo ""

# MSTR Bitcoin Holdings Data
echo "ü™ô MSTR Bitcoin Holdings:"
MSTR_HOLDINGS_FILE="data/analysis/MSTR_bitcoin_holdings_raw.json"
if [ -f "$MSTR_HOLDINGS_FILE" ]; then
    MSTR_HOLDINGS_DATE=$(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$MSTR_HOLDINGS_FILE" 2>/dev/null || stat -c "%y" "$MSTR_HOLDINGS_FILE" 2>/dev/null | cut -d' ' -f1-2)
    echo "   üìä Source: BitBo.io (SaylorTracker compatible)"
    echo "   ü™ô Total Holdings: $(printf "%'.0f" "$BITCOIN_HOLDINGS" 2>/dev/null || echo "$BITCOIN_HOLDINGS") BTC"
    echo "   üìÖ Last Updated: $MSTR_HOLDINGS_DATE"
    echo "   üìÅ Data File: $(basename "$MSTR_HOLDINGS_FILE")"
    echo "   üîÑ Collection Method: Web scraping"
else
    echo "   üìä Source: BitBo.io (SaylorTracker compatible)"
    echo "   ü™ô Total Holdings: $(printf "%'.0f" "$BITCOIN_HOLDINGS" 2>/dev/null || echo "$BITCOIN_HOLDINGS") BTC"
    echo "   üìÖ Last Updated: $CURRENT_TIME"
    echo "   üîÑ Collection Method: Fallback value (597,325 BTC)"
fi
echo ""



echo "ü™ô MSTR Holdings Update:"
echo "   $(printf "%'.0f" "$BITCOIN_HOLDINGS" 2>/dev/null || echo "$BITCOIN_HOLDINGS") BTC (Total Holdings)"
echo ""
echo "üìÅ Files Updated:"
echo "   CSV: $CSV_FILE ($TOTAL_RECORDS records)"
echo "   Chart: data/charts/MSTR_mnav_chart_$(date +%Y-%m-%d).html"
echo "   Bitcoin Data: Fresh 365-day history + current prices"
echo ""
echo "Your mNAV analysis is now fully updated with the latest market data! üöÄ" 